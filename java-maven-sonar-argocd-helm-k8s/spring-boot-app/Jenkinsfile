pipeline {
    
  agent {
        
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  
  environment {
        DOCKER_IMAGE = "raigaurav95/test:${BUILD_NUMBER}"
        DOCKER_TOKEN= "jen-doc"
        DOCKER_USERNAME= "raigaurav95"
        GIT_REPO_NAME = "Jenkins_project"
        GIT_USER_NAME = "Gauravrai462"
       
        
        }

  
  stages {
    
    /*stage('Clean workspace') {
                steps {
                  
                    sh 'sudo rm -rf var/lib/jenkins/workspace/*'
                   
                    
                }
            }*/

    
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    
    
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    /*stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://172.17.0.1:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }*/
   
   /*stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "raigaurav95/test:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry(credentialsId: 'docker-cred', url: 'https://hub.docker.com/')  {
                dockerImage.push()
            }
        }
      }
    }*/
  
   stage('Build Docker Image') {
          steps {
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t $DOCKER_IMAGE .'
            }
        }
        
        stage('Push Docker Image') {
            steps {
                withCredentials([string(credentialsId: 'jen-doc', variable: 'DOCKER_TOKEN', usernameVariable: 'DOCKER_USERNAME')]) {
                    sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_TOKEN'
                    sh 'docker push $DOCKER_IMAGE'
                }
            }
        }

    stage('Update Deployment File') {
    

    
        steps {
            withCredentials([string(credentialsId: 'Github-CICD', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "Gauravrai462@gmail.com"
                    git config user.name "Gauravrai462"
                    BUILD_NUMBER=${BUILD_NUMBER}
             
                    sed -i "s/raigaurav95/test:*/raigaurav95/test:${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}
