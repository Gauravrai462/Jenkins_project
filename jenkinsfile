Pipeline {
Agent none
stages {

stage ('checkout') {
step{
 sh '''
  echo "passed"
  echo "checkout skip"
  ''' 
    }
  }
  
  stage ('Build and test') {
  step{
  sh ''' ls -ltr
  mvn clean
  mvn install
  mvn clean package 
  // build the project and create a JAR file
  // sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
  
    }
   }
   
   stage ('static code analysis') {
   environment {
   sonar="http://localhost:9000"
   }
   steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
    }
   }
   
   stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('Gaurav@95')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    
  stage ('Deployment')
  environment {
  GIT_REPO_NAME:"Jenkins_project"
  GIT_USER_NAME:"Gauravrai462"
  
  step{
  withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "raigaurav@gmail.com"
                    git config user.name "Gaurav"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
  
  }
 }
 
}
